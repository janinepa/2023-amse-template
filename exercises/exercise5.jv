//Build an automated data pipeline for the following source:
//Link to data offer: https://mobilithek.info/offers/110000000002933000
//Direct download link: https://gtfs.rhoenenergie-bus.de/GTFS.zip
//Goal
//Work with GTFS data
//for Python, consider using ‘urllib.request.urlretrieve’ instead of the request library to download the ZIP file
//for Jayvee, if you use the FilePicker, do not use a leading dot in file paths, see this bug: https://github.com/jvalue/jayvee/issues/381
//Pick out only stops (from stops.txt)
//Only the columns stop_id, stop_name, stop_lat, stop_lon, zone_id with fitting data types
//Filter data
//Only keep stops from zone 2001
//Validate data
//stop_name must be a text and maintain german umlauts
//stop_lat/stop_lon must be a geographic coordinates between -90 and 90, including upper/lower bounds
//Drop rows containing invalid data
//Use fitting SQLite types (e.g., BIGINT, TEXT or FLOAT) for all columns
//Write data into a SQLite database called “gtfs.sqlite”, in the table “stops”

valuetype GeoCoordinates oftype decimal {
	constraints: [
		Coordinates,
	];
}

constraint Coordinates oftype RangeConstraint{
	lowerBound: -90;
    upperBound: 90;
}

valuetype ZoneId oftype integer {
	constraints: [
		Zone2001,
	];
}

constraint Zone2001 oftype RangeConstraint{
	lowerBound: 2001;
    upperBound: 2001;
}

pipeline StopsPipeline {

    block StopsExtractor oftype HttpExtractor {
        url: "https://gtfs.rhoenenergie-bus.de/GTFS.zip";
    }

    block ZipArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    block StopsFilePicker oftype FilePicker {
        path: "/stops.txt";
    }
    
    block StopsTextFileInterpreter oftype TextFileInterpreter {

    }

    block StopsCSVInterpreter oftype CSVInterpreter {
        delimiter: ",";
        enclosing: '"';
    }

    block StopsTableInterpreter oftype TableInterpreter {
		header: true;
	    columns: [
		    "stop_id" oftype integer,
            "stop_name" oftype text,
            "stop_lat" oftype GeoCoordinates,
            "stop_lon" oftype GeoCoordinates,
            "zone_id" oftype ZoneId,
		];
	}

    block StopsLoader oftype SQLiteLoader {
		table: "stops";
		file: "./gtfs.sqlite";
	}

    StopsExtractor
        ->ZipArchiveInterpreter
        ->StopsFilePicker
        ->StopsTextFileInterpreter
        ->StopsCSVInterpreter
        ->StopsTableInterpreter
        ->StopsLoader;
}